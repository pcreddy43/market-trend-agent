{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$shouldAppend, _options$includeHeade, _options$includeColum, _options$escapeFormul;\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: (_options$shouldAppend = options.shouldAppendQuotes) != null ? _options$shouldAppend : true,\n        includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n        includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n        escapeFormulas: (_options$escapeFormul = options.escapeFormulas) != null ? _options$escapeFormul : true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$csvOptions;\n    if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","useGridRegisterPipeProcessor","GridCsvExportMenuItem","jsx","_jsx","useGridCsvExport","apiRef","props","logger","ignoreValueFormatterProp","unstable_ignoreValueFormatterDuringExport","ignoreValueFormatter","csvExport","getDataAsCsv","useCallback","options","_options$getRowsToExp","_options$shouldAppend","_options$includeHeade","_options$includeColum","_options$escapeFormul","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","csvOptions","delimiter","shouldAppendQuotes","includeHeaders","includeColumnGroupsHeaders","escapeFormulas","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi","addExportMenuButtons","initialValue","_options$csvOptions","disableToolbarButton","component","componentName"],"sources":["C:/dev/stack._market_trendAgent/frontend-react/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$shouldAppend, _options$includeHeade, _options$includeColum, _options$escapeFormul;\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: (_options$shouldAppend = options.shouldAppendQuotes) != null ? _options$shouldAppend : true,\n        includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,\n        includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,\n        escapeFormulas: (_options$escapeFormul = options.escapeFormulas) != null ? _options$escapeFormul : true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$csvOptions;\n    if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}